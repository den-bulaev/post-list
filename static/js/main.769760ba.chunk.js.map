{"version":3,"sources":["Api/requests.js","Api/posts.js","components/PostList/PostList.jsx","components/Comments/Comments.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["request","endPoint","options","fetch","then","response","ok","Error","status","statusText","json","download","endpoint","method","deletePost","postId","PostList","posts","setPost","getPosts","useState","setPostId","handleClickOpen","event","id","target","dataset","getPost","handleClickClose","onDelete","a","className","map","title","data-post-id","type","onClick","defaultProps","React","memo","Comments","comments","body","PostDetails","App","setPosts","post","useEffect","ReactDOM","render","document","getElementById"],"mappings":"6OAGaA,EAAU,SAACC,EAAUC,GAGhC,OAAOC,MALQ,oCAGQF,EAELC,GACfE,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,WAUTC,EAAW,SAACC,GAGvB,OAAOZ,EAAQY,EAFA,CAAEC,OAAQ,SChBdC,EAAa,SAACC,GAAD,ODSHH,ECTsB,SAAD,OAAUG,GDY7Cf,EAAQY,EAFA,CAAEC,OAAQ,WADL,IAACD,G,sCETjBI,EAAW,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAClC,EAA4BC,mBAAS,GAArC,mBAAOL,EAAP,KAAeM,EAAf,KAEMC,EAAkB,SAACC,GACvB,IAAMC,EAAKD,EAAME,OAAOC,QAAQX,QDNb,SAACS,GAAD,OAAQb,EAAS,SAAD,OAAUa,EAAV,sBCQnCG,CAAQH,GACLpB,MAAK,SAACC,GAAD,OAAca,EAAQb,MAC9BgB,EAAUG,IAGNI,EAAmB,WACvBV,EAAQ,MACRG,EAAU,IAGNQ,EAAQ,uCAAG,WAAON,GAAP,SAAAO,EAAA,sEACThB,EAAWS,EAAME,OAAOC,QAAQX,QADvB,OAGfI,IAHe,2CAAH,sDAMd,OACE,oBAAIY,UAAU,OAAd,SACGd,EAAMe,KAAI,gBAAGR,EAAH,EAAGA,GAAIS,EAAP,EAAOA,MAAP,OACT,qBACEF,UAAU,aADZ,UAIE,6BACGE,IAGH,sBAAKF,UAAU,0BAAf,UACE,wBACEG,eAAcV,EACdO,UAAU,eACVI,KAAK,SACLC,QAASZ,KAAQT,EAASa,EAAmBN,EAJ/C,SAMGE,KAAQT,EAAS,QAAU,SAG9B,wBACEmB,eAAcV,EACdO,UAAU,eACVI,KAAK,SACLC,QAASP,EAJX,yBAhBGL,SAyCfR,EAASqB,aAAe,CACtBpB,MAAO,IAGMqB,UAAMC,KAAKvB,GC5EpBwB,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACf,qCACE,2CACA,oBAAIV,UAAU,WAAd,SACGU,EAAST,KAAI,gBAAGR,EAAH,EAAGA,GAAIkB,EAAP,EAAOA,KAAP,OACZ,6BACE,4BAAIA,KADGlB,YAgBjBgB,EAASH,aAAe,CACtBI,SAAU,IAGGH,UAAMC,KAAKC,GCvBpBG,EAAc,SAAC,GAAD,IAAGD,EAAH,EAAGA,KAAMT,EAAT,EAASA,MAAOQ,EAAhB,EAAgBA,SAAhB,OAClB,sBAAKV,UAAU,OAAf,UACE,oBAAIA,UAAU,cAAd,SACGE,IAGH,mBAAGF,UAAU,aAAb,SACGW,IAGH,cAAC,EAAD,CAAUD,SAAUA,QAcxBE,EAAYN,aAAe,CACzBI,SAAU,IAGGH,UAAMC,KAAKI,G,MCSXC,MAjCf,WACE,MAA0BxB,mBAAS,IAAnC,mBAAOH,EAAP,KAAc4B,EAAd,KACA,EAAwBzB,mBAAS,MAAjC,mBAAO0B,EAAP,KAAa5B,EAAb,KAOA,OALA6B,qBAAU,WJVY,IAACnC,KIWZ,QJXyBD,EAASC,IIYxCR,MAAK,SAACC,GAAD,OAAcwC,EAASxC,QAC9B,IAGD,qCACE,wBAAQ0B,UAAU,cAAlB,SACE,oBAAIA,UAAU,aAAd,0BAGF,uBAAMA,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEd,MAAOA,EACPC,QAASA,MAIb,qBAAKa,UAAU,eAAf,WACKe,GACD,cAAC,EAAD,eAAiBA,aC3B7BE,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.769760ba.chunk.js","sourcesContent":["/* eslint-disable import/prefer-default-export */\nconst BASE_URL = 'https://bloggy-api.herokuapp.com/';\n\nexport const request = (endPoint, options) => {\n  const url = BASE_URL + endPoint;\n\n  return fetch(url, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const remove = (endpoint) => {\n  const method = { method: 'DELETE' };\n\n  return request(endpoint, method);\n};\n\nexport const download = (endpoint) => {\n  const method = { method: 'GET' };\n\n  return request(endpoint, method);\n};\n","/* eslint-disable import/prefer-default-export */\nimport { remove, download } from './requests';\n\nexport const getPosts = (endpoint) => download(endpoint);\n\nexport const getPost = (id) => download(`posts/${id}?_embed=comments`);\n\nexport const deletePost = (postId) => remove(`posts/${postId}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPost, deletePost } from '../../Api/posts';\n\nimport './PostList.scss';\n\nconst PostList = ({ posts, setPost, getPosts }) => {\n  const [postId, setPostId] = useState(0);\n\n  const handleClickOpen = (event) => {\n    const id = event.target.dataset.postId;\n\n    getPost(id)\n      .then((response) => setPost(response));\n    setPostId(id);\n  };\n\n  const handleClickClose = () => {\n    setPost(null);\n    setPostId(0);\n  };\n\n  const onDelete = async (event) => {\n    await deletePost(event.target.dataset.postId);\n\n    getPosts();\n  };\n\n  return (\n    <ul className=\"list\">\n      {posts.map(({ id, title }) => (\n        <li\n          className=\"list__item\"\n          key={id}\n        >\n          <h2>\n            {title}\n          </h2>\n\n          <div className=\"list__buttons-container\">\n            <button\n              data-post-id={id}\n              className=\"list__button\"\n              type=\"button\"\n              onClick={id === +postId ? handleClickClose : handleClickOpen}\n            >\n              {id === +postId ? 'close' : 'open'}\n            </button>\n\n            <button\n              data-post-id={id}\n              className=\"list__button\"\n              type=\"button\"\n              onClick={onDelete}\n            >\n              delete\n            </button>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  })),\n  setPost: PropTypes.func.isRequired,\n  getPosts: PropTypes.func.isRequired,\n};\n\nPostList.defaultProps = {\n  posts: [],\n};\n\nexport default React.memo(PostList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comments = ({ comments }) => (\n  <>\n    <h3>Comments:</h3>\n    <ul className=\"comments\">\n      {comments.map(({ id, body }) => (\n        <li key={id}>\n          <p>{body}</p>\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nComments.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    postId: PropTypes.number.isRequired,\n    body: PropTypes.string.isRequired,\n  })),\n};\n\nComments.defaultProps = {\n  comments: [],\n};\n\nexport default React.memo(Comments);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Comments from '../Comments/Comments';\n\nconst PostDetails = ({ body, title, comments }) => (\n  <div className=\"post\">\n    <h2 className=\"post__title\">\n      {title}\n    </h2>\n\n    <p className=\"post__body\">\n      {body}\n    </p>\n\n    <Comments comments={comments} />\n  </div>\n);\n\nPostDetails.propTypes = {\n  body: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    postId: PropTypes.number.isRequired,\n    body: PropTypes.string.isRequired,\n  })),\n};\n\nPostDetails.defaultProps = {\n  comments: [],\n};\n\nexport default React.memo(PostDetails);\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect, useState } from 'react';\n\nimport { getPosts } from './Api/posts';\nimport PostList from './components/PostList/PostList';\nimport PostDetails from './components/PostDetails/PostDetails';\n\nimport './App.scss';\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [post, setPost] = useState(null);\n\n  useEffect(() => {\n    getPosts('posts')\n      .then((response) => setPosts(response));\n  }, []);\n\n  return (\n    <>\n      <header className=\"App__header\">\n        <h1 className=\"App__title\">Posts List</h1>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostList\n            posts={posts}\n            setPost={setPost}\n          />\n        </div>\n\n        <div className=\"App__details\">\n          {!!post && (\n            <PostDetails {...post} />\n          )}\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\n\nimport App from './App';\n\nReactDOM.render(\n  // eslint-disable-next-line react/jsx-filename-extension\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}